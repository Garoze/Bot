import { Client, Message, PermissionString, TextChannel, VoiceConnection, Collection, ClientOptions } from "discord.js";

export type ApplicationCommandOptionChoice = {
  readonly name: String;
  readonly value: String | number;
}

export type ApplicationCommandOption = {
  readonly type: number;
  readonly name: String;
  readonly description: String;
  readonly required?: Boolean;
  readonly choices?: Array<ApplicationCommandOptionChoice>;
  readonly options?: Array<ApplicationCommandOption>;

}

export interface ApplicationCommandModule<object> {
  readonly name: String;
  readonly description: String;
  readonly options?: Array<ApplicationCommandOption>;
  readonly default_permission?: Boolean;
  readonly permissions: PermissionString = 'SEND_MESSAGES';
  readonly usage: String;
  readonly devOnly?: Boolean;
  readonly execute: (args?: Array<T>) => any;
}

export class myClient extends Client {
  constructor(options: ClientOptions) {
    super(options);
    this.commands = new Collection();
  }
  public commands: Collection<String, object>;


  lookupCommand(name: String) {
    const command = this.commands.get(name);
    if (command) return command as ApplicationCommandModule<object>;
    return null;
  }

  executeCommand(name: String, ...args: any[]) {
    const command = this.commands.get(name);
    if (command) return (command as ApplicationCommandModule<object>).execute(args);
    return null;
  }
}
